import google.generativeai as genai
import os

def generate_test_code(test_description):
    """Gera c√≥digo de teste automatizado com base na descri√ß√£o fornecida."""

    # Captura a chave da API
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("üö® GEMINI_API_KEY n√£o est√° definida. Configure a vari√°vel de ambiente.")

    # Configura√ß√£o do modelo
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-1.5-pro-latest")  # Usa a vers√£o mais recente

    # Formatar a solicita√ß√£o para a IA
    prompt = f"""
    Voc√™ √© um especialista em testes automatizados. Gere um c√≥digo de teste automatizado em Python usando Pytest e Selenium.

    **Descri√ß√£o do Teste:**
    {test_description}

    **Regras:**
    - Utilize o formato Gherkin conforme o exemplo abaixo:
    Feature: [Nome da funcionalidade]
    Como um usu√°rio [ou papel espec√≠fico]
    Eu quero [a√ß√£o desejada]
    Para que [objetivo ou benef√≠cio]

    @TagRelevante
    Scenario: [Nome do Cen√°rio]
      Given [Contexto inicial necess√°rio]
      When [A√ß√£o realizada pelo usu√°rio]
      And [A√ß√£o adicional, se necess√°rio]
      Then [Resultado esperado]

    - Este projeto se trata de testes automatizados funcionais e est√° estruturado da seguinte forma:
    - Pasta `ai`: integra√ß√£o com o Gemini para corrigir erros e gerar novos cen√°rios.
    - Pasta `features`: arquivos `.feature` com cen√°rios escritos em Gherkin.
    - Pasta `pages`: m√©todos definidos para intera√ß√£o com elementos da interface (Page Object Model).
    - Pasta `tests`: implementa√ß√£o dos steps definidos no Gherkin e mapeamento para m√©todos da pasta `pages`.

    - Requisitos adicionais:
    - Testes devem cobrir **caminhos felizes, alternativos, negativos, seguran√ßa e performance**.
    - Utilize `WebDriverWait` com `expected_conditions` para intera√ß√£o com elementos.
    - O c√≥digo deve ser robusto e seguir boas pr√°ticas de testes automatizados.
    - Relat√≥rios devem ser gerados usando o Allure.
    - Sempre fornecer explica√ß√µes claras e detalhadas das decis√µes implementadas.

    **Sa√≠da esperada:**
    1. C√≥digo do teste funcional.
    2. Explica√ß√£o detalhada da l√≥gica implementada e poss√≠veis melhorias.
    """

    # Gerar o c√≥digo do teste usando IA
    response = model.generate_content(prompt)
    return response.text

