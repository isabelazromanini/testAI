{
  "failed_tests": [],
  "corrections": [],
  "new_tests": [
    {
      "description": "Verificar se o login retorna erro email invalido.",
      "test_code": "```robot\n*** Settings ***\nLibrary    SeleniumLibrary\n\n*** Test Cases ***\nVerificar Erro Email Inválido\n    Abrir o navegador\n    Acessar a página de login\n    Inserir email inválido\n    Inserir senha válida\n    Clicar no botão de login\n    Verificar mensagem de erro de email inválido\n    Fechar o navegador\n\n\n*** Keywords ***\nAbrir o navegador\n    Open Browser    ${URL}    ${BROWSER}\n\nAcessar a página de login\n    Go To    ${URL_LOGIN}\n\nInserir email inválido\n    Input Text    ${LOCATOR_EMAIL}    email_invalido\n    # Exemplo com um email claramente inválido:\n    # Input Text    ${LOCATOR_EMAIL}    teste@\n\nInserir senha válida\n    Input Text    ${LOCATOR_PASSWORD}    senha123\n\nClicar no botão de login\n    Click Element    ${LOCATOR_BOTAO_LOGIN}\n\nVerificar mensagem de erro de email inválido\n    ${error_message} =    Get Text    ${LOCATOR_MENSAGEM_ERRO}\n    Should Contain    ${error_message}    Email inválido\n    # Alternativa, caso a mensagem seja mais específica:\n    # Should Be Equal As Strings    ${error_message}    Por favor, insira um endereço de email válido.\n\nFechar o navegador\n    Close Browser\n\n\n*** Variables ***\n${URL}         https://www.exemplo.com  # Substituir pela URL da aplicação\n${BROWSER}     chrome\n${URL_LOGIN}   https://www.exemplo.com/login # Substituir pela URL da página de login\n${LOCATOR_EMAIL}      id=email # Substituir pelo locator correto\n${LOCATOR_PASSWORD}   id=password # Substituir pelo locator correto\n${LOCATOR_BOTAO_LOGIN}  id=login-button # Substituir pelo locator correto\n${LOCATOR_MENSAGEM_ERRO}  id=error-message # Substituir pelo locator correto\n\n```\n\n**Explicação da Lógica:**\n\n1. **`*** Settings ***`**: Importa a biblioteca `SeleniumLibrary`, essencial para interação com o navegador.\n\n2. **`*** Variables ***`**: Define variáveis para armazenar informações como URL da aplicação, tipo de navegador, localizadores de elementos na página (email, senha, botão de login, mensagem de erro).  **É crucial substituir os valores de exemplo pelos valores reais da aplicação.**  A utilização de variáveis torna o código mais legível, manutenível e facilita a adaptação para diferentes ambientes.\n\n3. **`*** Test Cases ***`**: Contém o caso de teste `Verificar Erro Email Inválido`.  Ele descreve os passos do teste em alto nível, utilizando keywords.\n\n4. **`*** Keywords ***`**:  Define as keywords que representam as ações e verificações do teste.  Cada keyword é uma sequência de comandos da `SeleniumLibrary`.\n\n    - `Abrir o navegador`: Abre o navegador especificado na variável `${BROWSER}` na URL definida em `${URL}`.\n    - `Acessar a página de login`: Navega para a URL de login.\n    - `Inserir email inválido`: Insere um email inválido (no exemplo, `email_invalido` ou `teste@`) no campo de email.  **Ajustar para um email inválido específico para o sistema testado.**\n    - `Inserir senha válida`:  Insere uma senha válida no campo de senha.  **Adaptar para uma senha válida conhecida.**\n    - `Clicar no botão de login`: Clica no botão de login.\n    - `Verificar mensagem de erro de email inválido`: Obtém o texto da mensagem de erro exibida na tela e verifica se ela contém a string \"Email inválido\".  A keyword `Should Contain` é usada para a verificação.  A alternativa com `Should Be Equal As Strings` permite uma verificação mais precisa, caso a mensagem de erro seja conhecida.\n    - `Fechar o navegador`: Fecha o navegador.\n\n\n**Como Executar:**\n\n1. **Instalação:** Certifique-se de ter o Robot Framework e a SeleniumLibrary instalados:\n   ```bash\n   pip install robotframework seleniumlibrary\n   ```\n2. **Driver do Navegador:** Baixe o driver apropriado para o seu navegador (ChromeDriver para Chrome, geckodriver para Firefox, etc.) e configure o path corretamente.\n3. **Execução:** Execute o arquivo `.robot` usando o comando:\n   ```bash\n   robot nome_do_arquivo.robot\n   ```\n\n**Observações:**\n\n- Os localizadores (`${LOCATOR_EMAIL}`, `${LOCATOR_PASSWORD}`, etc.) são exemplos e **devem ser substituídos pelos localizadores corretos dos elementos na sua aplicação**.  Utilize ferramentas de desenvolvedor do seu navegador para inspecionar os elementos e obter os localizadores (ID, nome, XPath, CSS selector).\n- O valor da senha e a mensagem de erro esperada devem ser adaptados de acordo com o sistema que está sendo testado.\n- Este exemplo assume que a mensagem de erro é exibida imediatamente após o clique no botão de login.  Pode ser necessário adicionar um tempo de espera (`Sleep`) se a mensagem demorar para aparecer.\n\n\nEste exemplo demonstra um caso de teste simples. Para cenários mais complexos, você pode criar keywords mais específicas e reutilizáveis para modularizar o código e torná-lo mais fácil de manter.\n"
    }
  ]
}