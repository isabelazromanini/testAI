{
  "failed_tests": [
    {
      "code": "Login Username Inválido\n    Dado que estou na página de login\n    Quando eu insiro o username    ${USERNAME_INVALIDO}\n    E eu insiro a senha            ${SENHA_VALIDA}\n    E clico no botão de login\n    Então deve retornar o erro     ${MSG_ERRO_USERNAME_INVALIDO}",
      "error": "Element 'id=flash' should have contained text 'teste' but its text was 'Your username is invalid!\n×'.",
      "name": "Login Username Inválido"
    }
  ],
  "corrections": [
    {
      "original_code": "Login Username Inválido\n    Dado que estou na página de login\n    Quando eu insiro o username    ${USERNAME_INVALIDO}\n    E eu insiro a senha            ${SENHA_VALIDA}\n    E clico no botão de login\n    Então deve retornar o erro     ${MSG_ERRO_USERNAME_INVALIDO}",
      "error": "Element 'id=flash' should have contained text 'teste' but its text was 'Your username is invalid!\n×'.",
      "fixed_code": "1. **Código Corrigido:**\n\n```robot\nLogin Username Inválido\n    Dado que estou na página de login\n    Quando eu insiro o username    ${USERNAME_INVALIDO}\n    E eu insiro a senha            ${SENHA_VALIDA}\n    E clico no botão de login\n    Então deve retornar o erro     Your username is invalid!\n```\n\n2. **Explicação da Correção:**\n\nO erro `Element 'id=flash' should have contained text 'teste' but its text was 'Your username is invalid! ×'` indica que a mensagem de erro esperada (`teste`, representada pela variável `${MSG_ERRO_USERNAME_INVALIDO}`) não corresponde à mensagem de erro real exibida na página (`Your username is invalid! ×`).\n\nA correção remove a variável `${MSG_ERRO_USERNAME_INVALIDO}` e utiliza diretamente a mensagem de erro correta `\"Your username is invalid!\"`.  A mensagem original tinha um \"×\" no final, provavelmente um ícone de fechar.  A menos que seja crucial validar a presença do ícone, é melhor evitar incluí-lo na asserção, pois a interface pode mudar e o ícone pode ser removido ou substituído, quebrando o teste desnecessariamente.  Concentrando-se apenas na parte textual essencial da mensagem, o teste se torna mais robusto e menos suscetível a quebras devido a mudanças cosméticas na UI.\n\n**Considerações Adicionais:**\n\n* **Boas Práticas:** Embora a solução acima funcione, seria uma boa prática definir a mensagem de erro esperada como uma variável em um arquivo de recursos ou arquivo de variáveis. Isso centraliza as mensagens de erro e facilita a manutenção.  Exemplo:\n\n```robot\n*** Variables ***\n${MSG_ERRO_USERNAME_INVALIDO}    Your username is invalid!\n\n*** Test Cases ***\nLogin Username Inválido\n    Dado que estou na página de login\n    Quando eu insiro o username    ${USERNAME_INVALIDO}\n    E eu insiro a senha            ${SENHA_VALIDA}\n    E clico no botão de login\n    Então deve retornar o erro     ${MSG_ERRO_USERNAME_INVALIDO}\n```\n\n* **Localização:**  Se a aplicação precisar suportar múltiplos idiomas, usar uma variável para a mensagem de erro se torna ainda mais importante. A variável pode ser definida de acordo com o idioma em execução.\n\n* **Tratamento do \"×\":** Se for realmente necessário verificar a presença do \"×\" ou outro elemento visual, é melhor usar uma keyword customizada que verifique a existência do elemento visual separadamente, sem depender do texto da mensagem de erro principal. Isso torna o teste mais claro e mais fácil de manter.\n\nAo seguir estas práticas, seus testes serão mais robustos, legíveis e fáceis de manter a longo prazo.",
      "explanation": ""
    }
  ],
  "new_tests": [
    "```robot\n*** Settings ***\nResource    ../keywords/general_keywords.robot  # Exemplo - adapte ao nome do seu arquivo de keywords gerais\n\n*** Test Cases ***\nLogin com Sucesso\n    Dado que o usuário está na página de login\n    Quando preenche o campo email com \"user@exemplo.com\"\n    E preenche o campo senha com \"senha123\"\n    E clica no botão de login\n    Então o sistema exibe a mensagem \"Bem-vindo\"\n\nLogin com Email Inválido\n    Dado que o usuário está na página de login\n    Quando preenche o campo email com \"usuario_invalido\"\n    E preenche o campo senha com \"senha123\"\n    E clica no botão de login\n    Então o sistema exibe a mensagem de erro \"Email inválido\"\n\nLogin com Senha Inválida\n    Dado que o usuário está na página de login\n    Quando preenche o campo email com \"user@exemplo.com\"\n    E preenche o campo senha com \"senha_incorreta\"\n    E clica no botão de login\n    Então o sistema exibe a mensagem de erro \"Senha incorreta\"\n\nLogin com Campos Vazios\n    Dado que o usuário está na página de login\n    Quando clica no botão de login\n    Então o sistema exibe a mensagem de erro \"Preencha o campo email\"\n    E o sistema exibe a mensagem de erro \"Preencha o campo senha\"\n\n\n*** Keywords ***\nDado que o usuário está na página de login\n    Abrir o navegador para a página de login\n\nAbrir o navegador para a página de login\n    Open Browser    https://site.com/login    chrome  # Substitua pela URL real\n    Maximize Browser Window\n\nPreenche o campo email com \"${email}\"\n    Input Text    id:email    ${email} # Substitua pelo locator correto\n\nPreenche o campo senha com \"${senha}\"\n    Input Text    id:senha    ${senha} # Substitua pelo locator correto\n\nClica no botão de login\n    Click Button    id:loginButton  # Substitua pelo locator correto\n\nO sistema exibe a mensagem \"${mensagem}\"\n    Element Should Contain    id:mensagem  ${mensagem} # Substitua pelo locator correto.  Ajuste a keyword se necessário (ex: Should Be Visible)\n\nO sistema exibe a mensagem de erro \"${mensagem}\"\n    Element Should Contain    id:mensagemErro  ${mensagem} # Substitua pelo locator correto. Ajuste a keyword se necessário (ex: Should Be Visible)\n\n\n```\n\n**Explicação da Lógica:**\n\nO arquivo `.robot` acima implementa quatro testes de login com diferentes cenários: sucesso, email inválido, senha inválida e campos vazios.  Cada teste segue o padrão BDD (Dado-Quando-Então) para melhor legibilidade.\n\nAs keywords de negócio como \"Dado que o usuário está na página de login\", \"Preenche o campo email com\", etc., foram criadas para abstrair a lógica de baixo nível do Selenium e tornar os testes mais fáceis de entender e manter.  Essas keywords utilizam as keywords da SeleniumLibrary (como `Open Browser`, `Input Text`, `Click Button` e `Element Should Contain`) para interagir com o navegador.\n\nOs locators (como `id:email`, `id:senha`, `id:loginButton`, `id:mensagem`, `id:mensagemErro`)  são exemplos e **devem ser substituídos pelos locators reais da sua aplicação.**  Adapte-os de acordo com a forma como os elementos da sua página de login são identificados (id, name, xpath, css, etc.).\n\nA keyword `Abrir o navegador para a página de login` foi criada para encapsular a abertura do navegador e maximização da janela, tornando a keyword `Dado que o usuário está na página de login` mais concisa.\n\nO arquivo também inclui um exemplo de importação de um arquivo de keywords gerais (`../keywords/general_keywords.robot`). Adapte o caminho e o nome do arquivo conforme a estrutura do seu projeto.  A ideia é centralizar keywords reutilizáveis em arquivos separados para promover a organização e a reutilização de código.\n\n\nFinalmente,  observe o uso da keyword `Element Should Contain`. A forma de verificar as mensagens de sucesso e erro pode variar dependendo da sua aplicação. Ajuste a keyword e/ou o locator conforme necessário para garantir a correta validação do seu teste. Por exemplo, pode ser necessário usar `Element Text Should Be` se você precisar de uma correspondência exata de texto, ou `Element Should Be Visible` para verificar se um elemento específico de erro está visível na página.\n"
  ]
}