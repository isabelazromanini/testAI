{
  "failed_tests": [],
  "corrections": [],
  "new_tests": [
    {
      "description": "Verificar se o login retorna erro email invalido.",
      "test_code": "```robot\n*** Settings ***\nLibrary           SeleniumLibrary\n\n*** Variables ***\n${URL}             https://www.example.com/login  # Substitua pela URL real\n${EMAIL_INVALIDO}  usuario@invalido\n${SENHA_VALIDA}    senha123\n\n*** Test Cases ***\nLogin com Email Inválido\n    Abrir o navegador\n    Acessar a página de login\n    Informar email inválido\n    Informar senha válida\n    Clicar no botão de login\n    Verificar mensagem de erro de email inválido\n\n*** Keywords ***\nAbrir o navegador\n    Open Browser    ${URL}    chrome  # Ou outro navegador desejado\n\nAcessar a página de login\n    #  Nesta caso, como a URL já abre a página de login, este passo é redundante.\n    #  Mantive para fins didáticos e para casos onde a URL base seja diferente.\n    Go To    ${URL}\n\nInformar email inválido\n    Input Text    id=email    ${EMAIL_INVALIDO}  # Substitua pelo locator correto do campo de email\n\nInformar senha válida\n    Input Text    id=password    ${SENHA_VALIDA} # Substitua pelo locator correto do campo de senha\n\nClicar no botão de login\n    Click Button    id=loginButton  # Substitua pelo locator correto do botão de login\n\nVerificar mensagem de erro de email inválido\n    ${mensagem_erro}=    Get Text    id=mensagem_erro  # Substitua pelo locator da mensagem de erro\n    Should Contain    ${mensagem_erro}    Email inválido # Substitua pela mensagem esperada. Pode ser necessário ajustar a asserção dependendo da mensagem real.\n    # Alternativamente, você pode verificar se um elemento específico de erro aparece:\n    # Element Should Be Visible    xpath=//div[@class='error' and contains(text(), 'Email inválido')]\n```\n\n**Explicação da Lógica:**\n\n1. **`*** Settings ***`**: Importa a biblioteca `SeleniumLibrary` para interagir com o navegador.\n2. **`*** Variables ***`**: Define variáveis para a URL, email inválido e senha válida. Isso torna o código mais legível e facilita a manutenção. Substitua os valores de exemplo pelos valores reais.\n3. **`*** Test Cases ***`**: Contém o caso de teste `Login com Email Inválido`.\n4. **`Abrir o navegador`**: Abre o navegador Chrome (ou o navegador especificado) na URL definida.\n5. **`Acessar a página de login`**: Navega para a URL de login. No exemplo, a URL de login é a mesma da URL base, então este passo é redundante, mas foi mantido para fins didáticos.\n6. **`Informar email inválido`**: Insere o email inválido no campo de email.  **IMPORTANTE:** Substitua `id=email` pelo locator correto do campo de email na sua aplicação.\n7. **`Informar senha válida`**: Insere a senha válida no campo de senha. **IMPORTANTE:** Substitua `id=password` pelo locator correto do campo de senha na sua aplicação.\n8. **`Clicar no botão de login`**: Clica no botão de login. **IMPORTANTE:** Substitua `id=loginButton` pelo locator correto do botão de login.\n9. **`Verificar mensagem de erro de email inválido`**: Obtém o texto da mensagem de erro e verifica se ele contém \"Email inválido\". **IMPORTANTE:** Substitua `id=mensagem_erro` pelo locator do elemento que contém a mensagem de erro e ajuste a string \"Email inválido\" para a mensagem de erro exata esperada na sua aplicação.  A alternativa usando `Element Should Be Visible` e um XPath é útil quando a mensagem de erro está contida em um elemento específico que aparece apenas quando o erro ocorre.\n\n\n**Melhorias em relação à versões anteriores:**\n\n- Uso de variáveis para URL, email e senha.\n- Keywords mais descritivas e reutilizáveis.\n- Boas práticas de indentação e estrutura.\n-  Alternativa de verificação da mensagem de erro usando `Element Should Be Visible` e XPath, tornando o teste mais robusto.\n- Explicação detalhada da lógica e dos pontos de atenção para adaptação ao ambiente real.\n\n\nLembre-se de instalar a biblioteca `SeleniumLibrary` executando o comando `pip install robotframework-seleniumlibrary` no seu ambiente.  Você precisará também ter um WebDriver compatível com o navegador escolhido (ex: ChromeDriver para Chrome). Certifique-se de ajustar os locators dos elementos de acordo com a sua aplicação.\n"
    }
  ]
}