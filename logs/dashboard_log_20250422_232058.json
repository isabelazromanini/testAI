{
  "failed_tests": [],
  "corrections": [],
  "new_tests": [
    {
      "description": "Verificar se o login retorna erro email invalido.",
      "test_code": "```robot\n*** Settings ***\nLibrary           SeleniumLibrary\n\n*** Variables ***\n${URL}             https://www.saucedemo.com/\n${USERNAME_FIELD}  user-name\n${PASSWORD_FIELD}  password\n${LOGIN_BUTTON}    login-button\n${ERROR_MESSAGE}   epic_fail_container\n\n*** Test Cases ***\nLogin com Email Inválido\n    Abrir o navegador\n    Acessar a página de login\n    Informar um email inválido\n    Informar a senha\n    Clicar no botão de login\n    Verificar mensagem de erro\n\n*** Keywords ***\nAbrir o navegador\n    Open Browser    ${URL}    chrome\n\nAcessar a página de login\n    Go To    ${URL}\n\nInformar um email inválido\n    Input Text    id:${USERNAME_FIELD}    email_invalido\n    \nInformar a senha\n    Input Text    id:${PASSWORD_FIELD}    secret_sauce\n\nClicar no botão de login\n    Click Button    id:${LOGIN_BUTTON}\n\nVerificar mensagem de erro\n    Element Should Be Visible    id:${ERROR_MESSAGE}\n    ${error_text}=    Get Text    id:${ERROR_MESSAGE}\n    Should Contain    ${error_text}    Epic sadface: Username and password do not match any user in this service\n\n\n```\n\n**Explicação da Lógica:**\n\n1. **`*** Settings ***`**: Importa a biblioteca `SeleniumLibrary` que fornece as keywords para interação com o navegador.\n\n2. **`*** Variables ***`**: Define variáveis para armazenar a URL do site, localizadores dos elementos da página (username, password, botão de login e mensagem de erro).  Isso torna o código mais legível e fácil de manter.\n\n3. **`*** Test Cases ***`**:\n    - **`Login com Email Inválido`**:  Este é o nome do caso de teste. Ele chama as keywords definidas na seção `*** Keywords ***` em uma sequência lógica para simular o fluxo de login com um email inválido.\n\n4. **`*** Keywords ***`**:\n    - **`Abrir o navegador`**: Abre o navegador Chrome na URL especificada.\n    - **`Acessar a página de login`**: Navega para a URL de login (neste caso, a mesma URL inicial).\n    - **`Informar um email inválido`**: Insere o texto \"email_invalido\" no campo de nome de usuário.  Este valor deve causar um erro de login.\n    - **`Informar a senha`**: Insere a senha \"secret_sauce\" no campo de senha.\n    - **`Clicar no botão de login`**: Clica no botão de login para enviar o formulário.\n    - **`Verificar mensagem de erro`**: \n        - Verifica se o elemento da mensagem de erro está visível na página. Isso confirma que a mensagem de erro foi exibida.\n        - Obtém o texto da mensagem de erro e o armazena na variável `${error_text}`.\n        - Verifica se o texto da mensagem de erro contém a string \"Epic sadface: Username and password do not match any user in this service\". Isso garante que a mensagem de erro correta seja exibida para um login inválido.\n\n\n**Para executar o teste:**\n\n1. Certifique-se de ter o Robot Framework e a SeleniumLibrary instalados.\n2. Salve o código acima em um arquivo chamado `login_test.robot`.\n3. Abra um terminal e navegue até o diretório onde você salvou o arquivo.\n4. Execute o teste com o comando: `robot login_test.robot`\n\n\nEste exemplo usa identificadores de elementos simples (IDs). Em um cenário real, você deve usar localizadores mais robustos (XPath, CSS Selectors) para garantir a confiabilidade dos seus testes. Além disso, a mensagem de erro específica pode variar dependendo da aplicação que você está testando. Adapte a keyword  `Verificar mensagem de erro`  de acordo com a sua aplicação.\n"
    }
  ]
}