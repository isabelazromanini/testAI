{
  "failed_tests": [],
  "corrections": [],
  "new_tests": [
    "```robot\n*** Settings ***\nLibrary           SeleniumLibrary\n\n*** Variables ***\n${URL}            https://www.saucedemo.com/\n${USERNAME_FIELD}  user-name\n${PASSWORD_FIELD}  password\n${LOGIN_BUTTON}   login-button\n${ERROR_MESSAGE}  //h3[@data-test='error']\n\n*** Test Cases ***\nLogin com Email Inválido\n    Abrir o navegador\n    Acessar a página de login\n    Informar email inválido\n    Informar senha válida\n    Clicar no botão de login\n    Verificar mensagem de erro de email inválido\n    Fechar o navegador\n\n*** Keywords ***\nAbrir o navegador\n    Open Browser    ${URL}    chrome\n\nAcessar a página de login\n    Go To    ${URL}\n\nInformar email inválido\n    Input Text    id:${USERNAME_FIELD}    usuarioinvalido\n    \nInformar senha válida\n    Input Text    id:${PASSWORD_FIELD}    secret_sauce\n\nClicar no botão de login\n    Click Button    id:${LOGIN_BUTTON}\n\nVerificar mensagem de erro de email inválido\n    Wait Until Element Is Visible    ${ERROR_MESSAGE}    10s\n    ${error_text}=    Get Text    ${ERROR_MESSAGE}\n    Should Be Equal As Strings    ${error_text}    Epic sadface: Username and password do not match any user in this service\n\nFechar o navegador\n    Close Browser\n```\n\n**Explicação da Lógica:**\n\n1. **Settings:** Importa a `SeleniumLibrary` para interagir com o navegador.\n2. **Variables:** Define variáveis para URL, localizadores de elementos na página (username, password, botão de login e mensagem de erro) para facilitar a manutenção e leitura do código.\n3. **Test Cases:**\n    - **Login com Email Inválido:** Este é o caso de teste principal. Ele chama as keywords na ordem correta para simular o fluxo de login com um email inválido.\n4. **Keywords:**\n    - **Abrir o navegador:** Abre o navegador Chrome na URL especificada.\n    - **Acessar a página de login:** Navega para a URL de login.\n    - **Informar email inválido:** Insere um email inválido (no caso, \"usuarioinvalido\") no campo de usuário.\n    - **Informar senha válida:** Insere uma senha válida (no exemplo, a senha padrão \"secret_sauce\" do Sauce Demo) no campo de senha.  Note que o teste foca na validação do email, mesmo com senha correta, o erro esperado é relacionado ao email.\n    - **Clicar no botão de login:** Clica no botão de login.\n    - **Verificar mensagem de erro de email inválido:** \n        - Aguarda até que a mensagem de erro seja visível na tela (até 10 segundos). Isso garante que a página tenha carregado completamente após o login.\n        - Obtém o texto da mensagem de erro.\n        - Compara o texto obtido com a mensagem de erro esperada  \"Epic sadface: Username and password do not match any user in this service\" usando `Should Be Equal As Strings`, validando se o erro correto é exibido.\n    - **Fechar o navegador:** Fecha o navegador após a execução do teste.\n\n**Pontos Importantes:**\n\n- O uso de variáveis torna o código mais legível e fácil de manter.\n- As keywords permitem a reutilização de código e melhoram a organização.\n- A espera explícita (`Wait Until Element Is Visible`) garante que o elemento esteja presente antes de interagir com ele, tornando o teste mais robusto.\n- A verificação da mensagem de erro confirma se a validação do email está funcionando corretamente.\n\nEste exemplo utiliza o site Sauce Demo (https://www.saucedemo.com/) para demonstração, que é um site de exemplo comum para testes automatizados. Você precisará adaptar os localizadores de elementos e a mensagem de erro esperada para o seu sistema específico.\n"
  ]
}